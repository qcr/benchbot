#!/usr/bin/env bash

################################################################################
################### Load Helpers & Global BenchBot Settings ####################
################################################################################

set -euo pipefail
IFS=$'\n\t'
abs_path=$(readlink -f $0)
pushd $(dirname $abs_path) > /dev/null
source .helpers

################################################################################
########################### Script Specific Settings ###########################
################################################################################

SIM_OMNI_PERSISTENT_CHK=$(printf "%s%s" \
  'docker logs benchbot_robot 2>/dev/null | tail -n 100 | ' \
  'grep -q "Omniverse System Monitor.*started"')

SIM_OMNI_PERSISTENT_CMD=(
  '/isaac-sim/start_nucleus.sh && sleep infinity'
  )

################################################################################
######################## Helper functions for commands #########################
################################################################################

usage_text="$(basename "$abs_path") -- Run script for the BenchBot backend & simulator / real robot

USAGE:

    Get info about the program / available options:
        $(basename "$abs_path") [-h|--help|--list-tasks|--list-envs]

    Run a simulator with a specific task setup:
        $(basename "$abs_path") --env ENV_NAME --task TASK_NAME
        $(basename "$abs_path") -e ENV_NAME -t TASK_NAME

    Request the backend to explicitly use the carter robot platform:
        $(basename "$abs_path") -e ENV_NAME -t TASK_NAME --robot carter

OPTION DETAILS:

    -h, --help             
            Show this help menu.

    -e, --env, --environment
            Select an environment to launch in the simulator (this must be
            called with the --task option). Environments are identified via
            \"ENVIRONMENT_NAME:VARIANT\" where ENVIRONMENT_NAME is the name of
            environment & VARIANT is the environment variation to use. For
            example, the variant 3 of the office environment would be: 

                    office:3

            Some tasks may require more than one environment variation (e.g.
            scene change detection). Multiple variations are specified using
            the format \"ENVIRONMENT_NAME:VARIANT_ONE:VARIANT_TWO\".  For
            example using the first, and then third variant of the office
            environment would be specified via:

                    office:1:3

            (use '--list-envs' to see a list of available environments)

    -f, --force-updateless
            BenchBot will exit if it detects updates to the software stack. Set
            this flag to continue using outdated software temporarily. Note that
            limited support is available for outdated software stacks, and all
            novel work will focus on the latest software stack. You should only
            use this flag when it is inconvenient to update immediately.

    --list-envs, --list-environments
            Search for & list all installed environments. The listed
            environment names are in the format needed for the '--env' option.
            Use '--show-environment' to see more details about an environment.

    --list-robots
            List all supported robot targets. This list will adjust to include
            what is available in your current installation (i.e. there will be
            no simulated robots listed if you installed with '--no-simulator').
            Use '--show-robot' to see more details about a robot.

    --list-tasks   
            Lists all supported task combinations. The listed tasks are printed
            in the format needed for the '--task' option. Use '--show-task' to
            see more details about a task.

    -r, --robot
            Configure the BenchBot supervisor for a specific robot. This
            currently is used to select either a simulator or real robot, but
            has all the flexibility in the future to target any desired robot
            platform, whether that be simulated or real.

            If the full backend is installed (with a simulator), the 'sim'
            target robot will be used by default, otherwise the 'real' target
            robot will be the default.

            (use '--list-robots' to see a list of available robots)

    --show-env, --show-environment
            Prints information about the provided environment name if
            installed. The corresponding YAML's location will be displayed,
            with a snippet of its contents.

    --show-robot
            Prints information about the provided robot name if installed. The
            corresponding YAML's location will be displayed, with a snippet
            of its contents.

    --show-task
            Prints information about the provided task name if installed. The
            corresponding YAML's location will be displayed, with a snippet
            of its contents.


    -t, --task             
            Configure BenchBot for a specific task style (this must be called
            with the '--env' option). Tasks are specified based on their name in
            the YAML file. The naming convention generally follows the format
            \"TYPE:OPTION_1:OPTION_2:...\". For example:

                    semantic_slam:passive:ground_truth

            is a semantic SLAM task with passive robot control and observations
            using a ground truth robot pose. 

            (use '--list-tasks' to see a list of supported task options)

    -u, --update-check
            Check for available updates to the BenchBot software stack and exit
            immediately.

    -v, --version
            Print version info for current installation.

FURTHER DETAILS:
    
    Please contact the authors of BenchBot for support or to report bugs:
        b.talbot@qut.edu.au
    "

_list_environments_pre=\
"Either simulated or real world environments can be selected. Please see the
'--list-robots' command for the available robot platforms. Only simulated robots 
can be run in simulated environments, and only real robots in real environments 
(as you would expect).

The following environments are supported in your BenchBot installation:
    "

_list_formats_pre=\
"Formats are used by a task to declare the formats of results in a re-usable
manner. You should ensure that tasks you use point to installed results
formats. The following formats are supported in your BenchBot installation:
    "

_list_robots_pre=\
"The following robot targets are supported in your BenchBot installation:
    "

_list_tasks_pre=\
"The following tasks are supported in your BenchBot installation:
    "

_robot_err=\
"ERROR: The BenchBot Robot Controller container has exited unexpectedly. This 
should not happen under normal operating conditions. Please see the complete
log below for a dump of the crash output:"

exit_code=
kill_persist=
function exit_gracefully() {
  if [ -z "$simulator_required" ]; then
    printf "\n\n${colour_blue}%s${colour_nc}\n" \
      "Re-closing network openings used for real robot:"
    close_network $network_forwarding $network_policy
  fi
  kill_benchbot "" $kill_persist
  xhost -local:root > /dev/null
  exit ${exit_code:-0}
}


################################################################################
#################### Parse & handle command line arguments #####################
################################################################################

# Safely parse options input
_args="help,env:,environment:,force-updateless,list-envs,list-environments,\
list-formats,list-robots,list-tasks,robot:,show-env:,show-environment:,\
show-format:,show-robot:,show-task:,task:,updates-check,version"
parse_out=$(getopt -o he:t:r:fuv --long $_args  -n "$(basename "$abs_path")" \
  -- "$@")
if [ $? != 0 ]; then exit 1; fi
eval set -- "$parse_out"
updates_exit=
updates_skip=
environment=
robot=
task=
while true; do
  case "$1" in
    -h|--help)
      echo "$usage_text" ; exit 0 ;;
    -e|--env|--environment)
      environment="$2"; shift 2 ;;
    -f|--force-updateless)
      updates_skip=1 ; shift ;;
    --list-envs|--list-environments)
      list_environments "$_list_environments_pre" "an"; exit $? ;;
    --list-formats)
      list_content "formats" "$_list_formats_pre"; exit $? ;;
    --list-robots)
      list_content "robots" "$_list_robots_pre"; exit $? ;;
    --list-tasks)
      list_content "tasks" "$_list_tasks_pre"; exit $? ;;
    -r|--robot)
      robot="$2"; shift 2 ;;
    --show-env|--show-environment)
      show_environment "$2"; exit $? ;;
    --show-format)
      show_content "formats" "$2"; exit $? ;;
    --show-robot)
      show_content "robots" "$2"; exit $? ;;
    --show-task)
      show_content "tasks" "$2"; exit $? ;;
    -t|--task)
      task="$2"; shift 2 ;;
    -u|--updates-check)
      updates_exit=1 ; shift ;;
    -v|--version)
      print_version_info; exit ;;
    --)
      shift ; break ;;
    *)
      echo "$(basename "$abs_path"): option '$1' is unknown"; shift ; exit 1 ;;
  esac
done

# Extract a list of environments from the provided environment string
environments=($(env_list "$environment" | tr ' ' '\n'))
environments_string="$(printf '%s,' "${environments[@]}")"
environments_string="${environments_string::-1}"

if [ -z "$updates_exit" ]; then
  # Generate any derived configuration parameters
  type="$(run_manager_cmd 'exists("robots", [("name", "'$robot'")]) and print(\
    get_value_by_name("robots", "'$robot'", "type"))')"
  simulator_required=1
  if [[ "$type" != "sim_"* ]]; then simulator_required=0; fi

  # TODO add an option for managing the persistent container
  kill_persist=1

  # Bail if any of the requested configurations are invalid
  validate_run_args "$robot" "$task" "$type" "$environment" "${environments[@]}"
fi

################################################################################
############## Run the simulator / real robot & BenchBot backend ###############
################################################################################

# Check for & handles updates to the BenchBot software stack
header_block "CHECKING FOR BENCHBOT SOFTWARE STACK UPDATES" ${colour_blue}

if [ -n "$updates_skip" ]; then 
  echo -e "${colour_yellow}Skipping ...${colour_nc}"
elif ! update_check "$(git branch -a --contains HEAD | grep -v HEAD | \
    grep '.*remotes/.*' | head -n 1 | sed 's/.*\/\(.*\)/\1/')"; then 
  exit 1; 
fi
if [ -n "$updates_exit" ]; then exit 0; fi

# Run the BenchBot software stack (kill whenever they exit)
kill_benchbot "" $kill_persist
trap exit_gracefully SIGINT SIGQUIT SIGKILL SIGTERM EXIT
header_block "STARTING THE BENCHBOT SOFTWARE STACK" ${colour_blue}

# Print some configuration information
printf "${colour_blue}%s${colour_nc}

    Selected task:        $task
    Task results format:  $results_format
    Selected robot:       $robot
    Selected environment: $environment
    Scene/s:              " \
      "Running the BenchBot system with the following settings:"
for i in "${!environments[@]}"; do
  if [ $i -ne 0 ]; then
    printf "%*s" 26
  fi
  printf "%s, starting @ pose %s\n" "${environments[$i]}" \
    "$(run_manager_cmd 'print(get_value_by_name("environments", \
      "'${environments[$i]}'", "start_pose"))')"
  printf "%*s" 26
  printf "(map_path = '%s')\n" \
    "$(run_manager_cmd 'print(get_value_by_name("environments", \
    "'${environments[$i]}'", "map_path"))')"
done
printf "    %-22s" "Simulator required:"
printf "%s (%s)\n"  $([ -z "$simulator_required" ] && echo "No" || echo "Yes") \
  "$type"
echo ""

# Create the network for BenchBot software stack
echo -e "${colour_blue}Creating shared network '$DOCKER_NETWORK':${colour_nc}"
docker network inspect "$DOCKER_NETWORK" >/dev/null 2>&1 || \
  docker network create "$DOCKER_NETWORK" --subnet="$URL_DOCKER_SUBNET" \
  --ip-range="$URL_DOCKER_SUBNET" --gateway="$URL_DOCKER_GATEWAY"
if [ -z "$simulator_required" ]; then
  printf "\n${colour_blue}%s${colour_nc}\n" \
    "Opening network to facilitate communications with real robot:"
  network_forwarding=$(cat /proc/sys/net/ipv4/conf/all/forwarding)
  network_policy=$(sudo iptables --list FORWARD | head -n 1 | \
    sed 's/Chain.*(policy \([^)]*\))/\1/')
  open_network;
fi

# Declare reusable parts to ensure our containers run with consistent settings
xhost +local:root > /dev/null
ros_master_host="benchbot_roscore"
docker_run="docker run -t --gpus all \
            --env DISPLAY \
            --env ROS_MASTER_URI=http://$ros_master_host:11311 \
            --env ROS_HOSTNAME=\$name \
            --network $DOCKER_NETWORK \
            --name=\$name \
            --hostname=\$name \
            --volume /tmp/.X11-unix:/tmp/.X11-unix \
            --volume $PATH_ADDONS:$PATH_ADDONS_INTERNAL:ro"
cmd_prefix='source $ROS_WS_PATH/devel/setup.bash && '

# Start containers for ROS, isaac_simulator, benchbot_simulator, & benchbot_supervisor
echo -e "\n${colour_blue}Starting container for BenchBot ROS:${colour_nc}"
cmd="${docker_run//'$name'/$ros_master_host}"
${cmd// /$'\t'} --ip "$URL_ROS" -d $DOCKER_TAG_BACKEND /bin/bash -c \
  "$cmd_prefix"'roscore'

if [ -n "$simulator_required" ]; then
  # TODO would be nice to have a less stupid way to do this, but bash's lack of
  # nested arrays (and difficulties passing arrays in general from functions)
  # makes it hard...
  args=()
  if [ "$type" = "sim_omni" ]; then
      args=("${SIM_OMNI_ARGS[@]}")
  fi

  # TODO DANGER: there are LOTS of ways this can go wrong. Need to do this
  # more robustly if we ever expand outside Omniverse-only focus. Examples:
  # - if next run uses a different simulator type, what do we do?
  # - the persist variables are vary ad-hoc / hacky
  # - it's really unclear to the user what is still running in background
  # - our checks for the status of things are weak (how do we know if an exec
  #   has failed now???)

  # Run a persistent container and execute within it if our simulator has
  # caching utilities (e.g. Cache in Omniverse)
  printf "\n${colour_blue}%s${colour_nc}\n" \
    "Starting persistent container for BenchBot Robot Controller ($type):"
  if [ "$(docker container inspect -f '{{.State.Running}}' benchbot_robot)" \
      == "true" ]; then
    printf "Skipping (already running)\n"
  else
    cmd="${docker_run//'$name'/benchbot_robot}"
    ${cmd// /$'\t'} --ip "$URL_ROBOT" -d "${args[@]}" \
      -t $DOCKER_TAG_SIM_PREFIX$type /bin/bash -c \
      "$cmd_prefix"'rosrun benchbot_robot_controller benchbot_robot_controller'
  fi

  printf "\n${colour_blue}%s${colour_nc}\n" \
    "Executing BenchBot Robot Controller in persistent container:"
  # TODO redo this check
  # while [ $loaded -eq 1 ]; do 
  #   eval $persist_chk && loaded=0 || loaded=1 
  #   sleep 1
  # done

  # TODO redo sending a "start command" to existing controller
  # docker exec -d benchbot_robot /bin/bash -c \
  #   "$cmd_prefix"'rosrun benchbot_robot_controller benchbot_robot_controller'

  # TODO redo checking if you're alive
  controller_pid=
  # while [ -z "$controller_pid" ]; do
  #   controller_pid="$(docker container top benchbot_robot | \
  #     grep 'benchbot_robot_controller' | grep -v 'grep' | awk '{print $2}' | \
  #     tr '\n' ',' | sed 's/,$//')"
  #   sleep 1
  # done
  printf "Started in persistent container (pids = $controller_pid)\n"
fi

echo -e "\n${colour_blue}Starting container for BenchBot Supervisor:${colour_nc}"
cmd="${docker_run//'$name'/benchbot_supervisor}"
${cmd// /$'\t'} --ip "$URL_SUPERVISOR" -d $DOCKER_TAG_BACKEND /bin/bash -c \
  "$cmd_prefix"'python3 -m benchbot_supervisor --task-name "'$task'" \
  --robot-name "'$robot'" --environment-names "'$environments_string'" \
  --addons-path "'$PATH_ADDONS_INTERNAL'"'

echo -e "\n${colour_blue}Starting container for BenchBot Debugging:${colour_nc}"
cmd="${docker_run//'$name'/benchbot_debug}"
${cmd// /$'\t'} --ip "$URL_DEBUG" -it -d $DOCKER_TAG_BACKEND /bin/bash

# Print the output of the Supervisor, watching for failures
header_block "BENCHBOT IS RUNNING (Ctrl^C to exit) ..." ${colour_green}

docker logs --follow benchbot_supervisor &

while [ -n "$(docker ps -q -f 'name=benchbot_supervisor')" ] && \
  ([ -z "$simulator_required" ] || \
  [ -n "$(docker ps -q -f 'name=benchbot_robot')" ]); do
  sleep 1
done
# sleep infinity

if [ -n "$simulator_required" ] && \
    [ -z "$(docker ps -q -f 'name=benchbot_robot')" ]; then
  header_block "BENCHBOT ROBOT CONTROLLER ERROR" ${colour_red}
  echo -e "\n${colour_red}$_robot_err${colour_nc}\n"
  docker logs benchbot_robot
fi
exit_code=1
exit
