#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

################################################################################
########################### Global BenchBot Settings ###########################
################################################################################

BRANCH_DEFAULT="master"

DOCKER_TAG_CORE="benchbot/core:base"
DOCKER_TAG_BACKEND="benchbot/backend:base"
DOCKER_TAG_SIM_PREFIX="benchbot/simulator:"
DOCKER_TAG_SUBMISSION="benchbot/submission:base"
DOCKER_NETWORK="benchbot_network"

FILENAME_ENV_GROUND_TRUTH=".benchbot_object_maps"
FILENAME_ENV_METADATA=".benchbot_data_files"

GIT_ADDONS="https://github.com/qcr/benchbot_addons"
GIT_API="https://github.com/qcr/benchbot_api"
GIT_BENCHBOT="https://github.com/qcr/benchbot"
GIT_CONTROLLER="https://github.com/qcr/benchbot_robot_controller"
GIT_EVAL="https://github.com/qcr/benchbot_eval"
GIT_MSGS="https://github.com/qcr/benchbot_msgs"
GIT_SIMULATOR_PREFIX="https://github.com/qcr/benchbot_"
GIT_SUPERVISOR="https://github.com/qcr/benchbot_supervisor"

HOSTNAME_DEBUG="benchbot_debug"
HOSTNAME_ROS="benchbot_ros"
HOSTNAME_ROBOT="benchbot_robot"
HOSTNAME_SUPERVISOR="benchbot_supervisor"

MD5_ISAAC_SDK="06387f9c7a02afa0de835ef07927aadf"

PATH_ROOT="$(realpath ..)"

PATH_API="$PATH_ROOT/api"
PATH_ADDONS="$PATH_ROOT/addons"
PATH_ADDONS_INTERNAL="/benchbot/addons"
PATH_CACHE="$PATH_ROOT/.cache"
PATH_DOCKERFILE_BACKEND="$PATH_ROOT/docker/backend.Dockerfile"
PATH_DOCKERFILE_CORE="$PATH_ROOT/docker/core.Dockerfile"
PATH_DOCKERFILE_SHARED="$PATH_ROOT/docker/shared_tools.Dockerfile"
PATH_DOCKERFILE_SIM_PREFIX="$PATH_ROOT/docker/"
PATH_DOCKERFILE_SUBMISSION="$PATH_ROOT/docker/submission.Dockerfile"
PATH_EVAL="$PATH_ROOT/eval"
PATH_ISAAC_SRCS="$PATH_ROOT/isaac"
PATH_LICENSES="$PATH_ROOT/.cache/licenses"
PATH_SYMLINKS="/usr/local/bin"
PATH_TEMP_FILE="/tmp/benchbot_scratch"

PORT_ROBOT=10000
PORT_SUPERVISOR=10000

RETIRED_SIMULATORS=(
  "sim_unreal:Isaac Sim 2019.2, powered by Unreal engine"
  )

SIZE_GB_FULL=32
SIZE_GB_LITE=20

SIM_OMNI_ARGS=(
  -v $PATH_CACHE/isaac-sim/cache/ov:/root/.cache/ov:rw
  -v $PATH_CACHE/isaac-sim/cache/glcache:/root/.cache/nvidia/GLCache:rw
  -v $PATH_CACHE/isaac-sim/cache/computecache:/root/.nv/ComputeCache:rw
  -v $PATH_CACHE/isaac-sim/logs:/root/.nvidia-omniverse/logs:rw
  -v $PATH_CACHE/isaac-sim/config:/root/.nvidia-omniverse/config:rw
  -v $PATH_CACHE/isaac-sim/data:/root/.local/share/ov/data:rw
  -v $PATH_CACHE/isaac-sim/documents:/root/Documents:rw
  -v /usr/share/vulkan/icd.d/nvidia_icd.json:/usr/share/vulkan/icd.d/nvidia_icd.json 
  -v /usr/share/vulkan/implicit_layer.d/VkLayer_MESA_device_select.json:/usr/share/vulkan/implicit_layer.d/VkLayer_MESA_device_select.json 
  -v /usr/share/glvnd/egl_vendor.d/10_nvidia.json:/usr/share/glvnd/egl_vendor.d/10_nvidia.json
)

SUPPORTED_SIMULATORS=(
  "sim_omni:The latest Isaac Sim, powered by Omniverse"
  )

URL_DEBUG="172.20.0.200"
URL_DOCKER_SUBNET="172.20.0.0/24"
URL_DOCKER_GATEWAY="172.20.0.254"
URL_ROS="172.20.0.100"
URL_ROBOT="172.20.0.101"
URL_SUPERVISOR="172.20.0.102"

################################################################################
################## Coloured terminal output & heading blocks ###################
################################################################################

colour_red='\033[0;31m'
colour_green='\033[0;32m'
colour_yellow='\033[0;33m'
colour_blue='\033[0;34m'
colour_magenta='\033[0;35m'
colour_nc='\033[0m'

function header_block() {
  header_text=${1:-"Header Block"}
  colour=${2:-${colour_red}}  # Red
  header_char=${3:-"#"}

  len=${#header_text}
  let "len_left=(78 - $len)/2" "len_right=(79 - $len)/2"

  echo -e "$colour"
  printf "%.0s${header_char}" $(seq 1 80); printf '\n'
  printf "%.0s${header_char}" $(seq 1 $len_left); printf " $header_text "; printf "%.0s${header_char}" $(seq $len_right); printf '\n'
  printf "%.0s${header_char}" $(seq 1 80)
  echo -e "$colour_nc\n"
}

################################################################################
######################## Helpers for managing BenchBot #########################
################################################################################

function clear_stdin() {
  read -t 0.1 -d '' -n 10000 discard || true
}

function close_network() {
  sudo sysctl net.ipv4.conf.all.forwarding=${1:-0}
  sudo iptables --policy FORWARD ${2:-DROP}
}

function eval_version() {
  # TODO this refers to evaluating whether an arbitrary version number meets
  # some arbitrary version requirement... it does not have anything to do with
  # benchbot_eval (this should be renamed to avoid confusion)

  # $1 = version number, $2 = required version number
  if [ -z "$1" ] || [[ ! "$1" == [0-9]* ]]; then
    return 2  # Bad version text
  elif [ "$1" = "$2" ] || [ "$2" = $(echo -e "$1\n$2" | sort -V | head -n 1) ]; then
    return 0  # Passes requirement
  else
    return 1  # Did not pass requirement
  fi
}

function kill_benchbot() {
  # $1 set this to run without header block
  # $2 binary flag on whether we should keep persistent containers
  # TODO make this quieter when I am confident it works as expected...
  if [ -z "${1:-}" ]; then
    header_block "CLEANING UP ALL BENCHBOT REMNANTS" ${colour_blue}
  fi

  targets=$(pgrep -f "docker attach benchbot" || true)
  if [ -n "$targets" ]; then
    echo -e "${colour_blue}Detached from the following containers:${colour_nc}"
    echo "$targets"
    for pid in "$targets"; do kill -9 $pid; done
  fi

  targets=$(docker ps -q -f name='benchbot*' || true)
  if [ "${2:-0}" -ne 0 ]; then
    # Remove our persistent containers from our stop list (benchbot_robot and
    # benchbot_ros)
    p="$(docker ps -q -f name=$HOSTNAME_ROBOT -f name=$HOSTNAME_ROS)"
    if [ -n "$p" ]; then
      targets="$(echo "$targets" | grep -v "$p" || true)"
    fi

    # Kill specific processes within container benchbot_robot container if it
    # exists
    if [ -n "$(docker ps -q -f name=$HOSTNAME_ROBOT)" ]; then
      # Use the supervisor to ask the simulator to stop
      printf "\n${colour_blue}%s${colour_nc}\n" \
        "Sending stop request to running controller:"
      curl -sS -L "$HOSTNAME_ROBOT:$PORT_ROBOT/stop"
        
      # TODO some wait / success checking logic?
    fi
  fi
  if [ -n "$targets" ]; then
    echo -e "\n${colour_blue}Stopped the following containers:${colour_nc}"
    docker stop $targets
  fi
  echo -e "\n${colour_blue}Deleted the following containers:${colour_nc}"
  docker system prune -f  # TODO this is still maybe a little too aggressive

  printf "\n${colour_blue}Finished cleaning!%s${colour_nc}\n\n" \
    "$([ ${2:-0} -ne 0 ] && echo " (use 'benchbot_run -k' for a full clean)")"
}

function open_network() {
  sudo sysctl net.ipv4.conf.all.forwarding=1
  sudo iptables --policy FORWARD ACCEPT
}

function print_version_info() {
  hash=$(git rev-parse HEAD)
  version_name="$(git log --tags --no-walk --pretty='%H %D' | grep "$hash" | \
    sed 's/^[^ ]* //; s/,[^:]*//g; s/tag: //g; s/: /, /g'; true)"
  if [ -z "$version_name" ]; then
    version_name="__unnamed__"
  fi
  printf "BenchBot Software Stack.\n"
  printf "Version '%s', from branch '%s'\n" \
    "$version_name" "$(git name-rev --name-only HEAD)"
  printf "(%s)\n" "$hash"
}

function simulator_installed() {
  # $1 query simulator, $2 string returned by simulators_installed
  [[ "$2" == "$1" ]] || [[ "$2" == *",$1"* ]] || [[ "$2" == *"$1,"* ]]
  return $?
}

function simulators_installed() {
  # TODO overall this to work with simulator-specific Docker images
  echo "$(docker inspect "$DOCKER_TAG_BACKEND" > /dev/null 2>&1 && \
    docker run --rm -t "$DOCKER_TAG_BACKEND" /bin/bash -c \
    'echo "$BENCHBOT_SIMULATORS"' | tr -d '[:space:]')"
}

function simulator_supported() {
  # $1 simulator name
  local s
  for s in "${SUPPORTED_SIMULATORS[@]}"; do
    if [ "$(echo "$s" | sed 's/:.*//')" = "$1" ]; then return 0; fi
  done
  return 1;
}

################################################################################
############### Checking if updates are available for components ###############
################################################################################

function _is_latest_local_git() {
  # $1 = directory, $2 = repo URL, $3 = repo branch, $4 = verbose name of repo
  current_hash=$(cd "$1" > /dev/null 2>&1 && git rev-parse HEAD)
  latest_hash=$(git ls-remote "$2" "$3" | awk '{print $1}')
  if [ -z "$latest_hash" ]; then 
    echo -e "${colour_red}ERROR: Repo at $2 has no branch '$3'!${colour_nc}"
    return 2
  fi
  echo "Current $4: $current_hash"
  echo "Latest $4: $latest_hash"
  [ "$current_hash" == "$latest_hash" ]
  return
}

function is_latest_benchbot() {
  _is_latest_local_git "$PATH_ROOT" "$GIT_BENCHBOT" "$1" \
    "BenchBot"
  return
}

function is_latest_benchbot_api() {
  _is_latest_local_git "$PATH_API" "$GIT_API" "$1" "BenchBot API"
  return
}

function is_latest_benchbot_controller() {
  current_hash=$(docker inspect "$DOCKER_TAG_BACKEND" > /dev/null 2>&1 && \
    docker run --rm -t "$DOCKER_TAG_BACKEND" /bin/bash -c \
    'cd $BENCHBOT_CONTROLLER_PATH && git rev-parse HEAD' | tr -d '[:space:]')
  latest_hash=$(git ls-remote "$GIT_CONTROLLER" "$1" | awk '{print $1}')
  echo "Current BenchBot Robot Controller: $current_hash"
  echo "Latest BenchBot Robot Controller: $latest_hash"
  [ "$current_hash" == "$latest_hash" ]
  return
}

function is_latest_benchbot_eval() {
  _is_latest_local_git "$PATH_EVAL" "$GIT_EVAL" "$1" "BenchBot Eval"
  return
}

function is_latest_benchbot_msgs() {
  current_hash=$(docker inspect "$DOCKER_TAG_BACKEND" > /dev/null 2>&1 && \
    docker run --rm -t "$DOCKER_TAG_BACKEND" /bin/bash -c \
    'cd $BENCHBOT_MSGS_PATH && git rev-parse HEAD' | tr -d '[:space:]')
  latest_hash=$(git ls-remote "$GIT_MSGS" "$1" | awk '{print $1}')
  echo "Current BenchBot ROS Messages: $current_hash"
  echo "Latest BenchBot ROS Messages: $latest_hash"
  [ "$current_hash" == "$latest_hash" ]
  return
}

function is_latest_benchbot_simulator() {
  # $1 = simulator name, $2 = branch name
  current_hash=$(docker inspect "$DOCKER_TAG_SIM_PREFIX$1" > /dev/null 2>&1 && \
    docker run --rm -t "$DOCKER_TAG_SIM_PREFIX$1" /bin/bash -c \
    'cd $BENCHBOT_SIMULATOR_PATH && git rev-parse HEAD' | tr -d '[:space:]')
  latest_hash=$(git ls-remote "$GIT_SIMULATOR_PREFIX$1" "$2" | awk '{print $1}')
  echo "Current BenchBot Simulator '$1': $current_hash"
  echo "Latest BenchBot Simulator '$1': $latest_hash"
  [ "$current_hash" == "$latest_hash" ]
  return
}

function is_latest_benchbot_supervisor() {
  current_hash=$(docker inspect "$DOCKER_TAG_BACKEND" > /dev/null 2>&1 && \
    docker run --rm -t "$DOCKER_TAG_BACKEND" /bin/bash -c \
    'cd $BENCHBOT_SUPERVISOR_PATH && git rev-parse HEAD' | tr -d '[:space:]')
  latest_hash=$(git ls-remote "$GIT_SUPERVISOR" "$1" | awk '{print $1}')
  echo "Current BenchBot Supervisor: $current_hash"
  echo "Latest BenchBot Supervisor: $latest_hash"
  [ "$current_hash" == "$latest_hash" ]
  return
}

function latest_version_info() {
  # Expects the output of a is_latest_* call on stdin (use a pipe)
  echo "$(</dev/stdin)" | grep "Latest" | sed 's/[^:]*:\s*\(.*\)/\1/' | \
    sed 's/\s*$//'
}

function update_check() {
  # TODO: function could be implemented much more concisely...
  _valid_str="Up-to-date"
  _invalid_str="Outdated"
  _valid_text="BenchBot is up-to-date."
  _invalid_text=\
"WARNING: Please install the latest BenchBot software stack by re-running the 
\"benchbot_install\" command, or run this with [-f|--force-updateless] to skip
updates."

  echo -ne "Checking BenchBot version ...\t\t\t\t"
  is_latest_benchbot "$1" > /dev/null
  benchbot_valid=$?
  [ $benchbot_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."
  echo -ne "Checking BenchBot API version ...\t\t\t"
  is_latest_benchbot_api "$1" > /dev/null
  api_valid=$?
  [ $api_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."
  echo -ne "Checking BenchBot Eval version ...\t\t\t"
  is_latest_benchbot_eval "$1" > /dev/null
  eval_valid=$?
  [ $eval_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."
  # echo -ne "Checking BenchBot Simulator version ...\t\t\t"
  # is_latest_benchbot_simulator "$1" > /dev/null
  # simulator_valid=$?
  # [ $simulator_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."
  simulator_valid=0
  echo -ne "Checking BenchBot Supervisor version ...\t\t"
  is_latest_benchbot_supervisor "$1" > /dev/null
  supervisor_valid=$?
  [ $supervisor_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."

  echo -ne "Checking installed BenchBot add-ons are up-to-date ...\t"
  addons_up_to_date > /dev/null
  addons_valid=$?
  [ $addons_valid -eq 0 ] && echo "$_valid_str." || echo "$_invalid_str."

  [ $benchbot_valid -eq 0 ] && [ $api_valid -eq 0 ] && \
    [ $eval_valid -eq 0 ] && [ $simulator_valid -eq 0 ] && \
    [ $supervisor_valid -eq 0 ] && [ $addons_valid -eq 0 ]
  valid=$?
  if [ $valid -eq 0 ]; then 
    echo -e "\n$colour_green$_valid_text$colour_nc"
  else
    echo -e "\n$colour_yellow$_invalid_text$colour_nc"; 
  fi
  return $valid
}


################################################################################
######################### BenchBot Add-ons Management ##########################
################################################################################

function addons_up_to_date() {
  outdated="$(run_manager_cmd 'print("\n".join(outdated_addons()))')"
  echo -e "Outdated add-ons:\n${outdated}"
  [ $(echo "$outdated" | sed '/^\s*$/d' | wc -l) -eq 0 ]
  return
}

function env_list() {
  # Converts an environment string like "miniroom:1:4" into a space separated
  # list like "miniroom:1 miniroom:4"
  # $1 env string
  name="$(echo "$1" | sed 's/:.*//')"
  list=($(echo "$1" | sed 's/[^:]*\(:.*\)/\1/; s/:/\n'$name':/g; s/^ *//'))
  if [ ${#list[@]} -eq 0 ]; then list+=(""); fi
  echo "${list[@]}"
}

function env_name() {
  # $1 env string
  echo ${1:-} | sed 's/:[^:]*$//'
}

function env_variant() {
  # $1 env string
  echo ${1:-} | sed 's/^.*://'
}

function install_addons() {
  dirty=($(run_manager_cmd 'print("\n".join(dirty_addons()))'))
  if [ ${#dirty[@]} -gt 0 ]; then
    printf "\n${colour_yellow}%s%s\n" \
      "WARNING: the following add-ons have local uncomitted changes. Commit or" \
      " delete them if you would like to return to a stable state."
    printf "\n\t%s" "${dirty[@]}"
    printf "${colour_nc}\n"
  fi
  printf "\n${colour_blue}%s${colour_nc}\n\n" \
    "Configuring locations for local add-on content:"
  folders="$(run_manager_cmd 'print(local_addon_path())')/{$(run_manager_cmd \
    'print(",".join(SUPPORTED_TYPES))')}"
  eval echo $folders | xargs mkdir -pv
  printf "Created '$folders'.\n"
  printf "\n${colour_blue}%s${colour_nc}\n" \
    "Installing add-ons based on the request string '${1}':"
  run_manager_cmd 'install_addons("'$1'")' '\n' '\n'

  printf "\n${colour_blue}%s${colour_nc}\n" \
    "Installing external add-on dependencies:"
  run_manager_cmd 'install_external_deps()' '\n' '\n'

  containers=( $(docker images \
    --filter "reference=$DOCKER_TAG_BACKEND" \
    --filter "reference=$DOCKER_TAG_SIM_PREFIX*" \
    --format "{{.Repository}}:{{.Tag}}"
      ) )
  for c in "${containers[@]}"; do
    printf "\n${colour_blue}%s${colour_nc}\n\n" \
      "Baking external add-on dependencies into '$c' container:"
    docker run --name tmp --detach -it "$c" /bin/bash
    py="$(docker exec -it tmp /bin/bash -c \ "which pip3 || which pip2" | \
      tr -d '[:space:]')"
    docker exec -it tmp /bin/bash -c "$(run_manager_cmd \
      'print(install_external_deps(True))' | sed "s|pip3|$py|")"
    docker commit tmp "$c"
    docker rm -f tmp
    printf "\n"
  done
}

function list_addons() {
  run_manager_cmd  'print_state()' '\n' '\n\n'
}

function list_content() {
  # $1 content type, $2 list prefix text, $3 optional "an" instead of "a", $4
  # optional remove n characters to get singular version
  singular=${1::-${4:-1}}
  l="$(run_manager_cmd '[print("\t%s" % r) for r in \
    sorted(get_field("'$1'", "name"))]')"
  echo "$2"
  if [ -z "$l" ]; then echo -e "\tNONE!"; else echo "$l"; fi
  echo "
See the '--show-"$singular" "${singular^^}"_NAME' command for specific "\
"details about
each "$singular", or check you have the appropriate add-on installed if you are 
missing "${3:-a}" "${singular}".
"
}

function list_environments() {
  # $1 list prefix text, $2 optional "an" instead of "a"
  text="environments"
  singular=${text::-1}
  l="$(run_manager_cmd '[print("\t%s" % r) for r in sorted([\
    ":".join(str(f) for f in e) \
    for e in get_fields("'$text'", ["name", "variant"])])]')"
  echo "$1"
  if [ -z "$l" ]; then echo -e "\tNONE!"; else echo "$l"; fi
  echo "
See the '--show-"$singular" "${singular^^}"_NAME' command for specific "\
"details about
each "$singular", or check you have the appropriate add-on installed if you are 
missing "${2:-a}" "${singular}".
"
}

function list_simulators() {
  simulators="$(simulators_installed)"
  printf "\nThe following simulator options are supported by BenchBot:\n"
  for s in "${SUPPORTED_SIMULATORS[@]}"; do
    n="$(echo "$s" | sed 's/:.*//')"
    d="$(echo "$s" | sed 's/^[^:]*://')"
    if simulator_installed "$n" "$simulators"; then
      printf "${colour_green}\t%-16s$d (installed)${colour_nc}\n" "$n"
    else
      printf "\t%-16s$d (available)\n" "$n"
    fi
  done

  printf "\nSupport is retired for the following simulator options:\n"
  for s in "${RETIRED_SIMULATORS[@]}"; do
    n="$(echo "$s" | sed 's/:.*//')"
    d="$(echo "$s" | sed 's/^[^:]*://')"
    if simulator_installed "$n" "$simulators"; then
      printf "${colour_yellow}\t%-16s$d (installed)${colour_nc}\n" "$n"
    else
      printf "\t$n\t$d\n"
    fi
  done
  printf "\n"
}

function remove_addons() {
  run_manager_cmd 'remove_addons("'$1'")' '\n' '\n\n'
}

function run_manager_cmd() {
  pushd "$PATH_ROOT/bin" &> /dev/null
  bash addons "${1}" "${2-}" "${3-}"
  popd &> /dev/null
}

function show_content() {
  # $1 content type, $2 name of selected content, $3 optional remove n
  # characters to get singular version
  singular=${1::-${3:-1}}
  if [ "$(run_manager_cmd 'print(exists("'$1'", [("name", "'$2'")]))')" \
      != "True" ]; then
    printf "%s %s\n" "${singular^} '$2' is not a supported ${singular}." \
      "Please check '--list-$1'."
    exit 1
  fi
  location=$(run_manager_cmd 'print(get_match("'$1'", [("name", "'$2'")]))')
  printf "${singular^} '$2' was found at the following location:\n\n\t%s\n\n" \
    "$location"
  printf "Printed below are the first 30 lines of the definition file:\n\n"
  head -n 30 "$location"
  printf "\n"
}

function show_environment() {
  # $1 name of selected environment
  text="environments"
  singular=${text::-1}
  name="$(env_name $1)"
  variant="$(env_variant $1)"
  if [ "$(run_manager_cmd 'print(exists("'$text'", \
      [("name", "'$name'"), ("variant", "'$variant'")]))')" != "True" ]; then
    printf "%s %s\n" "${singular^} '$1' is not a supported ${singular}." \
      "Please check '--list-$text'."
    exit 1
  fi
  location=$(run_manager_cmd 'print(get_match("'$text'", \
    [("name", "'$name'"), ("variant", "'$variant'")]))')
  printf "${singular^} '$1' was found at the following location:\n\n\t%s\n\n" \
    "$location"
  printf "Printed below are the first 30 lines of the definition file:\n\n"
  head -n 30 "$location"
  printf "\n"
  :
}

################################################################################
##################### Shared argument validation & parsing #####################
################################################################################

function expand_submission_mode() {
  if [ -z "${1:-}" ]; then return; fi
  mode="${1//-}"
  if [[ "$mode" == n* ]]; then 
    echo "native";
  elif [[ "$mode" == c* ]]; then
    echo "containerised";
  elif [[ "$mode" == s* ]]; then
    echo "submission";
  fi
}

function submission_command() {
  # $1 mode (numeric), $2 mode_details, $3 example name, $4 args
  if [ "$1" == 0 ]; then
    echo "$2 ${4:-}";
  elif [ $1 == 1 ]; then
    echo "docker build -f $(submission_dockerfile "$1" "$2" "$3") ."
  elif [ $1 == 2 ]; then
    echo "tar -czvf $([ -z "${4:-}" ] && \
      echo "$SUBMISSION_OUTPUT_DEFAULT" || echo "$args") ."
  elif [ $1 == 3 ]; then
    echo "$(run_manager_cmd 'print(get_value_by_name("examples", "'$3'", \
      "native_command"))') ${4:-}"
  elif [ $1 == 4 ]; then
    contdir="$(run_manager_cmd 'x = get_value_by_name("examples", "'$3'", \
      "container_directory"); x and print(x)')"
    echo "docker build -f $(submission_dockerfile "$1" "$2" "$3") $( \
      [ -n "$contdir" ] && echo "$contdir" || echo ".")"
  fi
}

function submission_directory() {
  # $1 mode (numeric), $2 mode_details, $3 example name
  if [ "$1" == 0 ] || [ "$1" == 1 ]; then
    echo "$(realpath ".")"
  elif [ "$1" == 2 ]; then
    echo "$(realpath "$2")"
  elif [ "$1" == 3 ] || [ "$1" == 4 ]; then
    echo "$(realpath "$(dirname "$(run_manager_cmd \
      'print(get_match("examples", [("name", "'$3'")]))')")")"
  fi
}

function submission_dockerfile() {
  # $1 mode (numeric), $2 mode_details, $3 example name,
  if [ "$1" == 1 ]; then
    echo "$(echo "$2" | sed 's/\/\?\s*$//')$([ ! -f "$2" ] && \
      echo "/Dockerfile")"
  elif [ "$1" == 4 ]; then
    
    contfn="$(run_manager_cmd 'x = get_value_by_name("examples", "'$3'", \
      "container_filename"); x and print(x)')"
    contdir="$(run_manager_cmd 'x = get_value_by_name("examples", "'$3'", \
      "container_directory"); x and print(x)')"
    echo "$(realpath "$(submission_directory "$1" "$2" "$3")/$(\
      [ -z "$contfn"] && echo "$contdir/Dockerfile" || echo "$contfn" )")"
  fi
}

function submission_mode() {
  # Returns a numeric submission mode given the arguments. Valid submission
  # modes are:
  # 0 - submission via native command
  # 1 - containerised submission via Docker
  # 2 - submission via tarring for uploading elsewhere
  # 3 - example submission via native command
  # 4 - example containerised submission via Docker
  # $1 example name, $2 example_containerised, $3 mode
  mode="$(expand_submission_mode $3)"
  if [ -n "$1" ] && [ -z "$2" ]; then
    echo 3
  elif [ -n "$1" ]; then
    echo 4
  elif [ "$mode" == "submission" ]; then
    echo 2
  elif [ "$mode" == "containerised" ]; then
    echo 1
  elif [ "$mode" == "native" ]; then
    echo 0
  fi
}

function submission_mode_string() {
  # $1 mode (numeric), $2 example
  if [ "$1" == 0 ]; then
    echo "Native"
  elif [ "$1" == 1 ]; then
    echo "Containerised"
  elif [ "$1" == 2 ]; then
    echo "Submission *.tgz creation"
  elif [ "$1" == 3 ]; then
    echo "Native (with example '$2')"
  elif [ "$1" == 4 ]; then
    echo "Containerised (with example '$2')"
  fi
}

function submission_output() {
  # $1 mode (numeric), $2 args
  if [ "$1" == 2 ]; then
    [ -z "${2:-}" ] && echo "$SUBMISSION_OUTPUT_DEFAULT" || echo "$2"
  fi
}


function _validate_batch_envs() {
  # $1 requested envs, $2 requested envs batch
  if [ -n "$1" ] && [ -n "$2" ]; then
    printf "${colour_red}%s${colour_nc}\n" \
      "ERROR: Only '--envs' or '--envs-batch' is valid, not both."
  elif [ -z "$1" ] && [ -z "$2" ]; then
    printf "${colour_red}%s %s${colour_nc}\n" \
      "ERROR: No environments were provided via either" \
      "'--envs' or '--envs-batch'"
  fi
}

function _validate_content() {
  # $1 = content type; $2 = name; $3 = full name (optional); $4 override check
  # with this value (optional); $5 optional remove n characters to get singular
  # version; $6 mention this script as source of list flag (optional)
  singular=${1::-${5:-1}}
  full=$([ -z "${3-}" ] && echo "$2" || echo "$3")
  check="$([ -z "${4-}" ] && \
    echo "$(run_manager_cmd 'print(exists("'$1'", [("name", "'$2'")]))')" || \
    echo "$4")"
  if [ "$check" != "True" ]; then
    printf "%s %s\n" "${singular^} '$2' is not a supported ${singular}." \
      "Please check '$([ -n "${6:-}" ] && echo "$6")--list-$1'."
    printf "\n${colour_red}%s${colour_nc}\n" \
      "ERROR: Invalid ${singular} selected (${singular} = '$full')"
  fi
}

function _validate_environment() {
  # $1 = name; $2 = full name
  _validate_content "environments" "$1" "${2-}" \
    "$(run_manager_cmd 'print(exists("environments", \
    [("name", "'$(env_name $1)'"), ("variant", "'$(env_variant $1)'")]))')"
}

function _validate_environment_count() {
  # $1 = number of selected environments, $2 task
  scene_count="$(run_manager_cmd 'print(\
    get_value_by_name("tasks", "'$2'", "scene_count"))')"
  if [[ "$scene_count" == *"None"* ]]; then scene_count=1; fi
  if [ $scene_count -ne $1 ]; then
    printf "${colour_red}%s\n       %s${colour_nc}\n" \
      "ERROR: Selected $1 environment/s for a task which requires $scene_count" \
      "environment/s ('$task')"
  fi
}

function _validate_evaluation_method() {
  # $1 evaluation method, $2 validate only (optional)
  v=${2:-}
  err=
  if [ -z "$1" ] && [ -z "$v" ]; then
    err="$(printf "%s %s\n" "Evaluation was requested but no evaluation"\
      "method was selected. A selection is required.")"
  elif [ -z "$v" ] && \
      [ "$(run_manager_cmd 'print(exists("evaluation_methods", \
      [("name", "'$1'")]))')" != "True" ]; then
    err="$(printf "%s %s\n" "Evaluation method '$1' is not supported." \
      "Please check '--list-methods'.")"
  fi

  if [ -n "$err" ]; then
    printf "$err\n"
    printf "\n${colour_red}%s${colour_nc}" \
      "ERROR: Invalid evaluation mode selected (evaluation method ='$1')"
  fi
}

function _validate_required_envs() {
  # $1 required envs, $2 required envs batch
  if [ -n "$1" ] && [ -n "$2" ]; then
    printf "${colour_red}%s %s${colour_nc}\n" \
      "ERROR: Only '--required-envs' or '--required-envs-batch' is valid,"\
      "not both."
  elif [ -n "$2" ]; then
    _validate_content "batches" "$2" "" "" 2
  fi
}

function _validate_results_files() {
  # $@ results files list
  err=
  if [ $# -eq 0 ]; then
    err="$(printf "%s %s\n" "No results file/s were provided. Please run" \
      "again with a results file.")"
  else
    for r in "$@"; do
      if [ ! -f "$r" ]; then
        err="$(printf "%s %s\n" "Results file '$r' either doesn't exist," \
        "or isn't a file.")"
      fi
    done
  fi

  if [ -n "$err" ]; then
    printf "$err\n"
    printf "\n${colour_red}%s${colour_nc}" \
      "ERROR: Results file/s provided were invalid. See errors above."
  fi
}

function _validate_results_possible() {
  # Validates whether creating results is feasible 
  # $1 mode (expanded), $2 evaluate method, $3 results_location
  if [[ "$1" == s* && ( -n "$2" || -n "$3" ) ]]; then
    printf "%s %s\n" "Cannot create results or perform evaluation in '$1'" \
      "mode. Please run again in a different mode."
    printf "\n${colour_red}%s${colour_nc}" \
      "ERROR: Requested results evaluation from 'submission' mode."
  fi
}

function _validate_simulators() {
  # Validate whether simulator selection is supported
  # $1 comma-separated simulator list
  err=
  sims=($(echo "$1" | sed 's/,/\n/g'))
  local s
  for s in "${sims[@]}"; do
    if ! simulator_supported "$s"; then
      err="Simulator '$s' is not a supported simulator."
    fi
  done

  if [ -n "$err" ]; then
    printf "$err\n"
    printf "\n${colour_red}%s%s${colour_nc}" \
      "ERROR: Simulator selection was invalid. " \
      "See errors above & --list-simulators."
  fi
}

function _validate_submission_mode() {
  # $1 example name, $2 example_containerised, $3 mode, $4 mode (numeric), 
  # $5 duplicate mode flag, $6 mode_details, $7 args
  err=

  # Handle nonsensical combinations
  if [ -n "$1" ] && [ -n "$3" ]; then
    err="$(printf "%s %s\n" "Provided both an example name," \
      "and submission mode ('$3')")"
  elif [ -z "$1" ] && [ -n "$2" ]; then
    err="$(printf "%s\n" \
      "Requested example containerisation but no example was provided.")"
  elif [ -n "$5" ]; then
    err="$(printf "%s %s\n" "Selected more than 1 mode, please only select" \
      "one of 'native', 'containerised', or 'submission'.")"
  elif [ -z "$1" ]; then
    if [ -z "$3" ]; then
      err="$(printf "%s %s\n" "No mode was selected. Please select an" \
        "example or one of 'native', 'containerised', or 'submission' modes.")"
    elif [ -z "$6" ]; then
      err="$(printf "%s %s\n" "Mode '$2' requires arguments, but none were" \
        "provided. Please see '--help' for details.")"
    fi
  fi

  # Handle errors in submission data
  if [ -z "$err" ]; then
    cmd="$(submission_command "$4" "$6" "$1" "$7")"
    dir="$(submission_directory "$4" "$6" "$1")"
    df="$(submission_dockerfile "$4" "$6" "$1")"
    if [ -n "$df" ] && [ ! -f "$df" ]; then
      err="$(printf "%s %s\n\t%s\n" "Containerised mode requested with the" \
        "following non-existent Dockerfile:" "$df")"
    elif [ "$4" == 2 ] && [ ! -d "$dir" ]; then
      err="$(printf "%s %s\n\t%s\n" "Mode '$3' was requested to tar & submit" \
        "the following non-existent directory:" "$dir")"
    fi
  fi

  # Print the error if we found one
  if [ -n "$err" ]; then 
    printf "$err\n"
    printf "\n${colour_red}%s${colour_nc}" \
      "ERROR: Mode selection was invalid. See errors above."
  fi
}

function _validate_type() {
  # Ensures your installation supports the requested type
  # $1 = type
  if [ "$1" == "real" ]; then
    printf "\n${colour_yellow}%s\n%s${colour_nc}\n" \
      "WARNING: Requested running with '$1'. Assuming you have an available" \
      "real robot & environment."
    return
  fi

  simulators="$(simulators_installed)"
  if ! simulators_installed "$1" "$simulators"; then
    printf "\n${colour_red}%s\n       %s${colour_nc}\n" \
      "ERROR: Requested running with '$1', but that simulator isn't installed." \
      "Installed simulator/s are: '$simulators'"
  fi
}

function _validate_types() {
  # Ensures all types are the same / consistent
  # $1 = robot name; $2 = environment string, $3 ... environments list
  robot="$1"
  env="$2" 
  shift 2
  envs=($@)
  types=()
  types+=("$(run_manager_cmd 'print(\
    get_value_by_name("robots", "'$robot'", "type"))')")
  for e in "${envs[@]}"; do
    types+=($(run_manager_cmd 'print(\
      get_value_by_name("environments", "'$e'", "type"))'))
  done

  err=
  for i in "${!types[@]}"; do
    if [ "${types[$i]}" != "${types[0]}" ]; then err=1; fi
  done

  if [ -n "$err" ]; then
    printf "%s %s\n%s\n\n" "Robot & environment types aren't consistent." \
      "Please ensure each of the following" "have the same type:"
    for i in "${!types[@]}"; do
      if [ $i -eq 0 ]; then
        printf "\tRobot '$robot' has type '${types[$i]}'\n"
      else
        printf "\tEnvironment '${envs[$((i-1))]}' has type '${types[$i]}'\n"
      fi
    done
    printf "\n${colour_red}%s${colour_nc}\n" \
      "ERROR: Inconsistent types selected (robot = '$1', environment = '$env')"
  fi
}

function validate_batch_args() {
  # $1 robot, $2 task, $3 envs_str, $4 envs_batch name, $5 example name, 
  # $6 example_containerised, $7 evaluation method, $8 containerised, $9
  # native, $10 mode details, $11 args, $12... environments list
  robot="$1"
  task="$2"
  envs_str="$3"
  envs_batch="$4"
  example="$5"
  example_containerised="$6"
  evaluation_method="$7"
  containerised="$8"
  native="$9"
  mode_details="${10}"
  args="${11}"
  shift 11
  envs_list=($@)

  # Handle batch specific validation first
  err="$(_validate_batch_envs "$envs_str" "$envs_batch")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi

  # Divert to validation functions for each of the sub-scripts
  mode="$([ -n "$native" ] && echo "$native" || echo "$containerised")"
  mode_num="$(submission_mode "$example" "$example_containerised" "$mode")"
  mode_dup=
  if [ -n "$native" ] && [ -n "$containerised" ]; then mode_dup=1; fi
  validate_submit_args "$evaluation_method" "$example" \
    "$example_containerised" "$mode" "$mode_num" "$mode_dup" "$mode_details" \
    "" "$args"

  if [ -n "$evaluation_method" ]; then
    envs="$(echo "${envs_list[@]}" | tr ' ' ',')"

    # This is gross... but we need a file for our results files that don't
    # exist yet, otherwise the validation will fail
    touch "$PATH_TEMP_FILE"
    validate_eval_args "$envs" "" "$envs" "$task" "$evaluation_method" "" \
      "$PATH_TEMP_FILE"
    rm "$PATH_TEMP_FILE"
  fi

  type=$(run_manager_cmd 'exists("robots", [("name", "'$robot'")]) and \
    print(get_value_by_name("robots", "'$robot'", "type"))')
  for e in "${envs_list[@]}"; do
    envs=($(env_list "$e" | tr ' ' '\n'))
    validate_run_args "$robot" "$task" "$type" "$e" "${envs[@]}"
  done

}

function validate_eval_args() {
  # $1 required_envs, $2 required_envs_batch, 
  # $3 required_envs_list (comma separated), $4 required_task, 
  # $5 evaluation method, $6 validate_only, $7 ... results files list
  required_envs="$1"
  required_envs_batch="$2"
  required_envs_list=($(echo "$3" | tr ',' '\n'))
  required_task="$4"
  method="$5"
  validate_only="$6"
  shift 6
  results_files=($@)

  err="$(_validate_required_envs "$required_envs" "$required_envs_batch")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
  if [ -n "${required_envs_list:-}" ]; then
    for e in "${required_envs_list[@]}"; do
      es=($(env_list "$e" | tr ' ' '\n'))
      for ee in "${es[@]}"; do
        err="$(_validate_environment "$ee")"
        if [ -n "$err" ]; then echo "$err"; exit 1; fi
      done
    done
  fi
  if [ -n "$required_task" ]; then
    err="$(_validate_content "tasks" "$required_task")"
    if [ -n "$err" ]; then echo "$err"; exit 1; fi
  fi
  err="$(_validate_evaluation_method "$method" "$validate_only")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
  err="$(_validate_results_files "${results_files[@]}")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
}

function validate_install_args() {
  # $1 simulator selection
  simulators="$1"

  err="$(_validate_simulators "$simulators")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
}

function validate_run_args() {
  # $1 robot, $2 task, $3 type of run, $4 environments_string, 
  # $5... environments list
  robot="$1"
  task="$2"
  type="$3"
  env="$4"
  shift 4
  envs=($@)

  err="$(_validate_content "robots" "$robot")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
  err="$(_validate_content "tasks" "$task")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
  results_format="$(run_manager_cmd 'rf = get_value_by_name("tasks", \
    "'$task'", "results_format"); rf is not None and print(rf)')"
  [ -n "$results_format" ] && \
    err="$(_validate_content "formats" "$results_format")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
  [ ${#envs[@]} -eq 0 ] && envs+=("")
  for e in "${envs[@]}"; do
    err="$(_validate_environment "$e" "$env")"
    if [ -n "$err" ]; then echo "$err"; exit 1; fi
  done
  err="$(_validate_types "$robot" "$env" "${envs[@]}")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
  err="$(_validate_type "$type")"
  if [[ "$err" == *"ERROR:"* ]]; then echo "$err"; exit 1; fi
  err="$(_validate_environment_count ${#envs[@]} "$task")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
}

function validate_submit_args() {
  # $1 evaluation method, $2 example, $3 example_containerised, $4 mode, 
  # $5 mode_num, $6 duplicate mode flag, $7 mode details, $8 results location, 
  # $9 args
  if [ -n "$1" ]; then
    err="$(_validate_evaluation_method "$1")"
    if [ -n "$err" ]; then echo "$err"; exit 1; fi
  fi
  err="$([ -n "$2" ] && _validate_content "examples" "$2" || true)"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
  err="$(_validate_submission_mode "$2" "$3" "$4" "$5" "$6" "$7" "$9")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
  err="$(_validate_results_possible "$3" "$1" "$5")"
  if [ -n "$err" ]; then echo "$err"; exit 1; fi
}

